{"path":"Attachments/Arc 2025-02-04 00.16.13.png","text":"/|/| mdn web docs References Learn Plus Curriculum@ 2] (]| Tools © Theme Log in References > JavaScript > Reference > Standard built-in objects > String > String.prototype.replace() @ English (US) String.prototype. startswith () St ï tot | In this article ring.prototype.replace String.prototype.strike() @ Try it String.prototype.sub() @ Syntax </7 Baseline Widely available ( BT ЭЮ DR String.prototype.substr() @ Description String.prototype.substring() The replace() method of String values returns a new string with one, some, or all matches of a Ехатр'!е5 НОО pattern replaced by а replacement . The pattern can be а string ога RegExp ‚ апа the replacement Specifications can be а string ог а function called for each match. If pattern is а string, only the first occurrence String.prototype.toLocaleLowerCase() will be replaced. The original string is left unchanged. Browser compatibility String.prototype.toLocaleUpperCase() See also String.prototype.toLowerCase() Try lt String.prototype.toString() JavaScript Demo: String.replace() PSs e pc st 1| const paragraph = \"I think Ruth's dog is cuter than your dog!\"; 2 String.prototype.toWellFormed() 3| console. Log(paragraph. replace(\"Ruth's\", 'my')); 4| // Expected output: \"I think my dog is cuter than your dog!\" String.prototype.trim() 5 . (R SR regex = /Dog/i; , . 7| console. log(paragraph. replace(regex, 'ferret')); R 8| // Expected output: \"I think Ruth's ferret is cuter than your dog!\" 9 String.prototype.trimStart() String.prototype.valueOf() String.prototype[Symbol.iterator] () V Instance properties String: length Inheritance Object/Function 35 æ replace(pattern, replacement) Рагате1егс pattern Can be а string ог ап object with а Symbol.replace method — the typical example being а regular expression. Any value that doesn't have the Symbol.replace method will be coerced to a string. replacement Can be a string or a function. e Ifit's а string, it will replace the substring matched by pattern . А number of special replacement patterns аге supported; see the Specifying_a string_as the replacement section below. « If it's а function, it will be invoked for every match апа its return value is used а5 the replacement text. The arguments supplied to this function are described п the Specifying а function as the replacement section below. Return value А new string, with one, some, ог all matches of the pattern replaced by the specified replacement. This method does not mutate the string value it's called on. It returns a new string. А string pattern will only be replaced once. To perform а global search апа replace, use а regular expression with the g flag, or use replaceAll() instead. If pattern is an object with a Symbol.replace method (including RegExp objects), that method is called with the target string and replacement as arguments. Its return value becomes the return value of replace() . In this case the behavior o) replace() is entirely encoded by the [Symbol.replace]() method — for example, any mention of \"capturing groups\" in the description below is actually functionality provided by RegExp-prototype[Symbol.replace](). Ifthe pattern 15 ап empty string, the replacement is prepended to the start of the string. 35 æ Pocu-neplace( )ЕНЕа A regexp with the g flag is the only case where replace() replaces more than once. For more information about how regex properties (especially the sticky flag) interact with replace() , see RegExp.prototype[Symbol.replace](). Specifying a string as the replacement The replacement string can include the following special replacement patterns: _ Inserts the matched substring. _ Inserts the portion of the string that precedes the matched substring. - Inserts the portion of the string that follows the matched substring. Inserts the nth ( 1 -indexed) capturing group where n is а positive integer less than 100. Inserts the named capturing group where Name is the group name. $n and $<Name> are only available if the pattern argument is a RegExp object. Ifthe pattern is a string, or if the corresponding capturing group isn't present in the regex, then the pattern will be replaced а5 а literal. If the group is present but isn't matched (because it's part of а disjunction), it will be replaced with an empty string. 35 & \"“foo\".replace(/(f)/, \"$2\"); // \"$200\"; the regex doesn't have the second group \"foo\".replace(\"f\", \"$1\"); // “$100\"; the pattern is a string, so it doesn't have any groups \"foo\".replace(/(f)|(g)/, \"$2\"); // “oo\"; the second group exists but isn't matched Specifying a function as the replacement You can specify a function as the second parameter. In this case, the function will be invoked after the match has been performed. The function's result (return value) will be used as the replacement string. @ Note: The above-mentioned special replacement patterns do not apply for strings returned from the replacer function. The function has the following signature: 35 & function replacer(match, p1, p2, /x .., */ pN, offset, string, groups) { return replacement; } The arguments to the function are as follows: match The matched substring. (Corresponds to $& above.) p1 Ц р2 Æ pN The nth string found by а capture group (including named capturing groups), provided the first argument to replace() is а RegExp object. (Corresponds 10 $1, $2, etc. above.) For example, if the pattern is /(\\a+)(\\b+)/, then p1 is the match for \\a+, and p2 is the match for \\b+. If the group is part of а disjunction (e.g. “abc\".replace(/(a)|(b)/, replacer) ), the unmatched alternative will be undefined . offset The offset of the matched substring within the whole string being examined. For example, if the whole string was ‘abcd' , апа the matched substring was “bc' , then this argument will be 1. string The whole string being examined. groups An object whose keys are the used group names, and whose values are the matched portions (undefined if not matched). Only present if the pattern contains at least one named capturing group. The exact number of arguments depends on whether the first argument is a RegExp object — and, if so, how many capture groups it has. The following example will set newString to 'abc - 12345 — #$x%\" : 35 æ function replacer(match, p1, p2, p3, offset, string) { // pl is non-digits, p2 digits, and p3 non-alphanumerics return [p1, p2, p3]l.join(\" - \"); } const newString = “abc12345#$x%\".replace(/([\"\\d]x) (\\аж) ( [^\\м]ж) /, replacer); console. log(newString); // abc — 12345 — #$x% The function will be invoked multiple times for each full match to be replaced if the regular expression in the first parameter is global. Defining the regular expression in replace() In the following example, the regular expression is defined in replace() апа includes the ignore case flag. 35 & const str = \"Twas the night before Xmas...\"; const newstr = str.replace(/xmas/i, \"Christmas\"); console.log(newstr); // Twas the night before Christmas... This logs 'Twas the night before Christmas...'. I @ Note: See the regular expression guide for more explanations about regular expressions. Using the global and ignoreCase flags with replace() Global replace can only be done with a regular expression. In the following example, the regular expression includes the global and ignore case flags which permits replace() to replace each occurrence of 'apples' п the string with 'oranges' . 35 æ const re = /apples/gi; const str = \"Apples are round, and apples are juicy.\"; const newstr = str.replace(re, \"oranges\"); console. log(newstr); // oranges are round, and oranges are juicy. This logs 'oranges are round, and oranges are juicy'. Switching words in a string The following script switches the words in the string. For the replacement text, the script uses capturing groups апа the $1 апа $2 replacement patterns. 35 æ const re = /(\\w+)\\s(\\w+)/; const str = \"Maria Cruz\"; const newstr = str.replace(re, \"$2, $1\"); console.log(newstr); // Cruz, Maria This logs 'Cruz, Maria'. Using an inline function that modifies the matched characters In this example, all occurrences of capital letters in the string are converted to lower case, and a hyphen is inserted just before the match location. The important thing here is that additional operations аге needed оп the matched item before it 15 given back а а replacement. The replacement function accepts the matched snippet as its parameter, and uses it to transform the case and concatenate the hyphen before returning. 35 æ function styleHyphenFormat(propertyName) { function upperToHyphenLower(match, offset, string) { return (offset > 0 ? \"-\" : \"\") + match.toLowerCase(); у return propertyName. replace(/[A-Z]/g, upperToHyphenLower) ; } Given styleHyphenFormat('borderTop') , this returns 'border-top' . Because we want to further transform the result of the match before the final substitution is made, we must use a function. This forces the evaluation of the match prior to the toLowerCase() method. If we had tried to do this using the match without a function, the toLowerCase() would have no effect. 35 & // Won't work (%] const newString = propertyName. replace(/[A-Z1/g, \"-\" + \"$&\".toLowerCase()); This is because '$&'.toLowerCase() would first be evaluated а5 а string literal (resulting in the same '$&' ) before using the characters as а pattern. Replacing a Fahrenheit degree with its Celsius equivalent The following example replaces a Fahrenheit degree with its equivalent Celsius degree. The Fahrenheit degree should be а number ending with “F\" . The function returns the Celsius number ending with “c\" . For example, if the input number is “212F\" , the function returns \"1eec\" . If the number is \"oF\" , the function returns \"-17.77777777777778C\" . The regular expression test checks for any number that ends with F . The number of Fahrenheit degrees is accessible 10 е function through К5 second parameter, p1 . The function sets the Celsius number based оп the number of Fahrenheit degrees passed т а string 10 the f2c() function. f2c() then returns the Celsius number. This function approximates Perl's s///e flag. 35 æ function f2c(x) { function convert(str, p1, offset, s) { return `${((р1 - 32) * 5) / 9}С`; } const s = String(x); const test = /(-?\\d+(7?:\\.\\dx)?)F\\b/g; return s.replace(test, convert); } Making a generic replacer Suppose we want to create a replacer that appends the offset data to every matched string. Because the replacer function already receives the offset parameter, it will be trivial if the regex is statically known. 35 æ “abcd”.replace(/(bc)/, (match, p1, offset) => ‘${match} (${offset}) `); // “abc (1) @\" However, this replacer would be hard to generalize if we want it to work with any regex pattern. The","libVersion":"0.3.2","langs":"eng+fra+rus"}